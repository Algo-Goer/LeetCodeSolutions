/*
计算字符串的数字和
给你一个由若干数字（0 - 9）组成的字符串s和一个整数
如果s的长度大于k则可以执行一轮操作

在一轮操作中需要完成以下工作：
将s拆分成长度为k的若干连续数字组
使得前k个字符都分在第一组
接下来的k个字符都分在第二组，依此类推
注意，最后一个数字组的长度可以小于k

用表示每个数字组中所有数字之和的字符串来替换对应的数字组。例如，"346" 会替换为 "13" ，因为 3 + 4 + 6 = 13
合并所有组以形成一个新字符串。如果新字符串的长度大于k则重复第一步。
返回在完成所有轮操作后的s

举例：
输入：s = "11111222223", k = 3
输出："135"
解释：
- 第一轮，将 s 分成："111"、"112"、"222" 和 "23" 。
  接着，计算每一组的数字和：1 + 1 + 1 = 3、1 + 1 + 2 = 4、2 + 2 + 2 = 6 和 2 + 3 = 5 。
  这样，s 在第一轮之后变成 "3" + "4" + "6" + "5" = "3465" 。
- 第二轮，将 s 分成："346" 和 "5" 。
  接着，计算每一组的数字和：3 + 4 + 6 = 13 、5 = 5 。
  这样，s 在第二轮之后变成 "13" + "5" = "135" 。
现在，s.length <= k ，所以返回 "135" 作为答案。
*/
class Solution
{
public:
    string digitSum(string s, int k)
    {
        while (s.size() > k)
        {
            string tmp; 
            int sum = 0;
            for (int i = 0; i < s.size(); ++i)
            {
                sum += s[i] - '0';
                if (i % k == k - 1 || i + 1 == s.size()) // 当前位置是最后一位或是最后一组
                {
                    tmp += to_string(sum); // 将当前组的和添加到临时字符串中
                    sum = 0;               // 清空当前组的和
                }
            }
            s = tmp; // 将临时字符串赋值给原字符串
        }
        return s;
    }
};